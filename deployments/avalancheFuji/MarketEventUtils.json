{
  "address": "0x5fF1803D5D096C0fc45bccb3546ae193f4A9f2f3",
  "abi": [],
  "transactionHash": "0x463e8b991ede057e308e01dd50963f4ef76e8c86e0714570a83e7d4cf6f38f82",
  "receipt": {
    "to": null,
    "from": "0xFb11f15f206bdA02c224EDC744b0E50E46137046",
    "contractAddress": "0x5fF1803D5D096C0fc45bccb3546ae193f4A9f2f3",
    "transactionIndex": 0,
    "gasUsed": "3399166",
    "logsBloom": "0x
    "blockHash": "0x20f89050f510660d466b67ce288d9cd0088bbe95b1d12701b8e563aa7f77f553",
    "transactionHash": "0x463e8b991ede057e308e01dd50963f4ef76e8c86e0714570a83e7d4cf6f38f82",
    "logs": [],
    "blockNumber": 25777691,
    "cumulativeGasUsed": "3399166",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 17,
  "solcInputHash": "92fc6f61cea26103c30dd16cb10581fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/market/MarketEventUtils.sol\":\"MarketEventUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"contracts/error/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // AdlUtils errors\\n    error InvalidSizeDeltaForAdl(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error AdlNotEnabled();\\n\\n    // Bank errors\\n    error SelfTransferNotSupported(address receiver);\\n    error InvalidNativeTokenSender(address msgSender);\\n\\n    // BaseRouter\\n    error CouldNotSendNativeToken(address receiver, uint256 amount);\\n\\n    // CallbackUtils errors\\n    error MaxCallbackGasLimitExceeded(uint256 callbackGasLimit, uint256 maxCallbackGasLimit);\\n\\n    // Config errors\\n    error InvalidBaseKey(bytes32 baseKey);\\n    error InvalidFeeFactor(bytes32 baseKey, uint256 value);\\n\\n    // Timelock errors\\n    error ActionAlreadySignalled();\\n    error ActionNotSignalled();\\n    error SignalTimeNotYetPassed(uint256 signalTime);\\n    error InvalidTimelockDelay(uint256 timelockDelay);\\n    error MaxTimelockDelayExceeded(uint256 timelockDelay);\\n    error InvalidFeeReceiver(address receiver);\\n    error InvalidOracleSigner(address receiver);\\n\\n    // DepositStoreUtils errors\\n    error DepositNotFound(bytes32 key);\\n\\n    // DepositUtils errors\\n    error EmptyDeposit();\\n    error EmptyDepositAmounts();\\n\\n    // ExecuteDepositUtils errors\\n    error MinMarketTokens(uint256 received, uint256 expected);\\n    error EmptyDepositAmountsAfterSwap();\\n    error InvalidPoolValueForDeposit(int256 poolValue);\\n    error InvalidSwapOutputToken(address outputToken, address expectedOutputToken);\\n    error InvalidReceiverForFirstDeposit(address receiver, address expectedReceiver);\\n    error InvalidMinMarketTokensForFirstDeposit(uint256 minMarketTokens, uint256 expectedMinMarketTokens);\\n\\n    // AdlHandler errors\\n    error AdlNotRequired(int256 pnlToPoolFactor, uint256 maxPnlFactorForAdl);\\n    error InvalidAdl(int256 nextPnlToPoolFactor, int256 pnlToPoolFactor);\\n    error PnlOvercorrected(int256 nextPnlToPoolFactor, uint256 minPnlFactorForAdl);\\n\\n    // ExchangeUtils errors\\n    error RequestNotYetCancellable(uint256 requestAge, uint256 requestExpirationAge, string requestType);\\n\\n    // OrderHandler errors\\n    error OrderNotUpdatable(uint256 orderType);\\n    error InvalidKeeperForFrozenOrder(address keeper);\\n\\n    // FeatureUtils errors\\n    error DisabledFeature(bytes32 key);\\n\\n    // FeeHandler errors\\n    error InvalidClaimFeesInput(uint256 marketsLength, uint256 tokensLength);\\n\\n    // GasUtils errors\\n    error InsufficientExecutionFee(uint256 minExecutionFee, uint256 executionFee);\\n    error InsufficientWntAmountForExecutionFee(uint256 wntAmount, uint256 executionFee);\\n    error InsufficientExecutionGasForErrorHandling(uint256 startingGas, uint256 minHandleErrorGas);\\n    error InsufficientExecutionGas(uint256 startingGas, uint256 estimatedGasLimit, uint256 minAdditionalGasForExecution);\\n    error InsufficientHandleExecutionErrorGas(uint256 gas, uint256 minHandleExecutionErrorGas);\\n\\n    // MarketFactory errors\\n    error MarketAlreadyExists(bytes32 salt, address existingMarketAddress);\\n\\n    // MarketStoreUtils errors\\n    error MarketNotFound(address key);\\n\\n    // MarketUtils errors\\n    error EmptyMarket();\\n    error DisabledMarket(address market);\\n    error MaxSwapPathLengthExceeded(uint256 swapPathLengh, uint256 maxSwapPathLength);\\n    error InsufficientPoolAmount(uint256 poolAmount, uint256 amount);\\n    error InsufficientReserve(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error InsufficientReserveForOpenInterest(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error UnableToGetOppositeToken(address inputToken, address market);\\n    error UnexpectedTokenForVirtualInventory(address token, address market);\\n    error EmptyMarketTokenSupply();\\n    error InvalidSwapMarket(address market);\\n    error UnableToGetCachedTokenPrice(address token, address market);\\n    error CollateralAlreadyClaimed(uint256 adjustedClaimableAmount, uint256 claimedAmount);\\n    error OpenInterestCannotBeUpdatedForSwapOnlyMarket(address market);\\n    error MaxOpenInterestExceeded(uint256 openInterest, uint256 maxOpenInterest);\\n    error MaxPoolAmountExceeded(uint256 poolAmount, uint256 maxPoolAmount);\\n    error MaxPoolAmountForDepositExceeded(uint256 poolAmount, uint256 maxPoolAmountForDeposit);\\n    error UnexpectedBorrowingFactor(uint256 positionBorrowingFactor, uint256 cumulativeBorrowingFactor);\\n    error UnableToGetBorrowingFactorEmptyPoolUsd();\\n    error UnableToGetFundingFactorEmptyOpenInterest();\\n    error InvalidPositionMarket(address market);\\n    error InvalidCollateralTokenForMarket(address market, address token);\\n    error PnlFactorExceededForLongs(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error PnlFactorExceededForShorts(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error InvalidUiFeeFactor(uint256 uiFeeFactor, uint256 maxUiFeeFactor);\\n    error EmptyAddressInMarketTokenBalanceValidation(address market, address token);\\n    error InvalidMarketTokenBalance(address market, address token, uint256 balance, uint256 expectedMinBalance);\\n    error InvalidMarketTokenBalanceForCollateralAmount(address market, address token, uint256 balance, uint256 collateralAmount);\\n    error InvalidMarketTokenBalanceForClaimableFunding(address market, address token, uint256 balance, uint256 claimableFundingFeeAmount);\\n    error UnexpectedPoolValue(int256 poolValue);\\n\\n    // Oracle errors\\n    error EmptySigner(uint256 signerIndex);\\n    error InvalidBlockNumber(uint256 minOracleBlockNumber, uint256 currentBlockNumber);\\n    error InvalidMinMaxBlockNumber(uint256 minOracleBlockNumber, uint256 maxOracleBlockNumber);\\n    error HasRealtimeFeedId(address token, bytes32 feedId);\\n    error InvalidRealtimeFeedLengths(uint256 tokensLength, uint256 dataLength);\\n    error EmptyRealtimeFeedId(address token);\\n    error InvalidRealtimeFeedId(address token, bytes32 feedId, bytes32 expectedFeedId);\\n    error InvalidRealtimeBidAsk(address token, int192 bid, int192 ask);\\n    error InvalidRealtimeBlockHash(address token, bytes32 blockHash, bytes32 expectedBlockHash);\\n    error InvalidRealtimePrices(address token, int192 bid, int192 ask);\\n    error RealtimeMaxPriceAgeExceeded(address token, uint256 oracleTimestamp, uint256 currentTimestamp);\\n    error MaxPriceAgeExceeded(uint256 oracleTimestamp, uint256 currentTimestamp);\\n    error MinOracleSigners(uint256 oracleSigners, uint256 minOracleSigners);\\n    error MaxOracleSigners(uint256 oracleSigners, uint256 maxOracleSigners);\\n    error BlockNumbersNotSorted(uint256 minOracleBlockNumber, uint256 prevMinOracleBlockNumber);\\n    error MinPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error MaxPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error EmptyPriceFeedMultiplier(address token);\\n    error EmptyRealtimeFeedMultiplier(address token);\\n    error InvalidFeedPrice(address token, int256 price);\\n    error PriceFeedNotUpdated(address token, uint256 timestamp, uint256 heartbeatDuration);\\n    error MaxSignerIndex(uint256 signerIndex, uint256 maxSignerIndex);\\n    error InvalidOraclePrice(address token);\\n    error InvalidSignerMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error InvalidMedianMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error NonEmptyTokensWithPrices(uint256 tokensWithPricesLength);\\n    error InvalidMinMaxForPrice(address token, uint256 min, uint256 max);\\n    error EmptyPriceFeed(address token);\\n    error PriceAlreadySet(address token, uint256 minPrice, uint256 maxPrice);\\n    error MaxRefPriceDeviationExceeded(\\n        address token,\\n        uint256 price,\\n        uint256 refPrice,\\n        uint256 maxRefPriceDeviationFactor\\n    );\\n    error InvalidBlockRangeSet(uint256 largestMinBlockNumber, uint256 smallestMaxBlockNumber);\\n\\n    // OracleModule errors\\n    error InvalidPrimaryPricesForSimulation(uint256 primaryTokensLength, uint256 primaryPricesLength);\\n    error EndOfOracleSimulation();\\n\\n    // OracleUtils errors\\n    error EmptyCompactedPrice(uint256 index);\\n    error EmptyCompactedBlockNumber(uint256 index);\\n    error EmptyCompactedTimestamp(uint256 index);\\n    error UnsupportedOracleBlockNumberType(uint256 oracleBlockNumberType);\\n    error InvalidSignature(address recoveredSigner, address expectedSigner);\\n\\n    error EmptyPrimaryPrice(address token);\\n\\n    error OracleBlockNumbersAreSmallerThanRequired(uint256[] oracleBlockNumbers, uint256 expectedBlockNumber);\\n    error OracleBlockNumberNotWithinRange(\\n        uint256[] minOracleBlockNumbers,\\n        uint256[] maxOracleBlockNumbers,\\n        uint256 blockNumber\\n    );\\n\\n    // BaseOrderUtils errors\\n    error EmptyOrder();\\n    error UnsupportedOrderType();\\n    error InvalidOrderPrices(\\n        uint256 primaryPriceMin,\\n        uint256 primaryPriceMax,\\n        uint256 triggerPrice,\\n        uint256 orderType\\n    );\\n    error EmptySizeDeltaInTokens();\\n    error PriceImpactLargerThanOrderSize(int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error NegativeExecutionPrice(int256 executionPrice, uint256 price, uint256 positionSizeInUsd, int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error OrderNotFulfillableAtAcceptablePrice(uint256 price, uint256 acceptablePrice);\\n\\n    // IncreaseOrderUtils errors\\n    error UnexpectedPositionState();\\n\\n    // OrderUtils errors\\n    error OrderTypeCannotBeCreated(uint256 orderType);\\n    error OrderAlreadyFrozen();\\n\\n    // OrderStoreUtils errors\\n    error OrderNotFound(bytes32 key);\\n\\n    // SwapOrderUtils errors\\n    error UnexpectedMarket();\\n\\n    // DecreasePositionCollateralUtils errors\\n    error InsufficientFundsToPayForCosts(uint256 remainingCostUsd, string step);\\n    error InvalidOutputToken(address tokenOut, address expectedTokenOut);\\n\\n    // DecreasePositionUtils errors\\n    error InvalidDecreaseOrderSize(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error UnableToWithdrawCollateral(int256 estimatedRemainingCollateralUsd);\\n    error InvalidDecreasePositionSwapType(uint256 decreasePositionSwapType);\\n    error PositionShouldNotBeLiquidated(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    // IncreasePositionUtils errors\\n    error InsufficientCollateralAmount(uint256 collateralAmount, int256 collateralDeltaAmount);\\n    error InsufficientCollateralUsd(int256 remainingCollateralUsd);\\n\\n    // PositionStoreUtils errors\\n    error PositionNotFound(bytes32 key);\\n\\n    // PositionUtils errors\\n    error LiquidatablePosition(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    error EmptyPosition();\\n    error InvalidPositionSizeValues(uint256 sizeInUsd, uint256 sizeInTokens);\\n    error MinPositionSize(uint256 positionSizeInUsd, uint256 minPositionSizeUsd);\\n\\n    // PositionPricingUtils errors\\n    error UsdDeltaExceedsLongOpenInterest(int256 usdDelta, uint256 longOpenInterest);\\n    error UsdDeltaExceedsShortOpenInterest(int256 usdDelta, uint256 shortOpenInterest);\\n\\n    // SwapPricingUtils errors\\n    error UsdDeltaExceedsPoolValue(int256 usdDelta, uint256 poolUsd);\\n\\n    // RoleModule errors\\n    error Unauthorized(address msgSender, string role);\\n\\n    // RoleStore errors\\n    error ThereMustBeAtLeastOneRoleAdmin();\\n    error ThereMustBeAtLeastOneTimelockMultiSig();\\n\\n    // ExchangeRouter errors\\n    error InvalidClaimFundingFeesInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimCollateralInput(uint256 marketsLength, uint256 tokensLength, uint256 timeKeysLength);\\n    error InvalidClaimAffiliateRewardsInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimUiFeesInput(uint256 marketsLength, uint256 tokensLength);\\n\\n    // SwapUtils errors\\n    error InvalidTokenIn(address tokenIn, address market);\\n    error InsufficientOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error InsufficientSwapOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error DuplicatedMarketInSwapPath(address market);\\n    error SwapPriceImpactExceedsAmountIn(uint256 amountAfterFees, int256 negativeImpactAmount);\\n\\n    // SubaccountRouter errors\\n    error InvalidReceiverForSubaccountOrder(address receiver, address expectedReceiver);\\n\\n    // SubaccountUtils errors\\n    error SubaccountNotAuthorized(address account, address subaccount);\\n    error MaxSubaccountActionCountExceeded(address account, address subaccount, uint256 count, uint256 maxCount);\\n\\n    // TokenUtils errors\\n    error EmptyTokenTranferGasLimit(address token);\\n    error TokenTransferError(address token, address receiver, uint256 amount);\\n    error EmptyHoldingAddress();\\n\\n    // AccountUtils errors\\n    error EmptyAccount();\\n    error EmptyReceiver();\\n\\n    // Array errors\\n    error CompactedArrayOutOfBounds(\\n        uint256[] compactedValues,\\n        uint256 index,\\n        uint256 slotIndex,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsUint256(\\n        uint256[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsBytes(\\n        bytes[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    // WithdrawalStoreUtils errors\\n    error WithdrawalNotFound(bytes32 key);\\n\\n    // WithdrawalUtils errors\\n    error EmptyWithdrawal();\\n    error EmptyWithdrawalAmount();\\n    error MinLongTokens(uint256 received, uint256 expected);\\n    error MinShortTokens(uint256 received, uint256 expected);\\n    error InsufficientMarketTokens(uint256 balance, uint256 expected);\\n    error InsufficientWntAmount(uint256 wntAmount, uint256 executionFee);\\n    error InvalidPoolValueForWithdrawal(int256 poolValue);\\n\\n    // Uint256Mask errors\\n    error MaskIndexOutOfBounds(uint256 index, string label);\\n    error DuplicatedIndex(uint256 index, string label);\\n}\\n\",\"keccak256\":\"0x1ffb0444ae38e3ec9b7c5affea2b9aea714542afbf69d76bc3ac908e041e6890\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"./EventUtils.sol\\\";\\n\\n// @title EventEmitter\\n// @dev Contract to emit events\\n// This allows main events to be emitted from a single contract\\n// Logic contracts can be updated while re-using the same eventEmitter contract\\n// Peripheral services like monitoring or analytics would be able to continue\\n// to work without an update and without segregating historical data\\ncontract EventEmitter is RoleModule {\\n    event EventLog(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog1(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog2(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        bytes32 indexed topic2,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param eventData the event data\\n    function emitEventLog(\\n        string memory eventName,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param eventData the event data\\n    function emitEventLog1(\\n        string memory eventName,\\n        bytes32 topic1,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog1(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param topic2 topic2 for indexing\\n    // @param eventData the event data\\n    function emitEventLog2(\\n        string memory eventName,\\n        bytes32 topic1,\\n        bytes32 topic2,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog2(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            topic2,\\n            eventData\\n        );\\n    }\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param data additional data\\n    function emitDataLog1(bytes32 topic1, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log1(add(data, 32), len, topic1)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param data additional data\\n    function emitDataLog2(bytes32 topic1, bytes32 topic2, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log2(add(data, 32), len, topic1, topic2)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param data additional data\\n    function emitDataLog3(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log3(add(data, 32), len, topic1, topic2, topic3)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param topic4 event topic 4\\n    // @param data additional data\\n    function emitDataLog4(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log4(add(data, 32), len, topic1, topic2, topic3, topic4)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x160c1835150b3cc703cfc9ffdb74138b3c4939a0f6988171113e37cbf1f0f90e\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary EventUtils {\\n    struct EmitPositionDecreaseParams {\\n        bytes32 key;\\n        address account;\\n        address market;\\n        address collateralToken;\\n        bool isLong;\\n    }\\n\\n    struct EventLogData {\\n        AddressItems addressItems;\\n        UintItems uintItems;\\n        IntItems intItems;\\n        BoolItems boolItems;\\n        Bytes32Items bytes32Items;\\n        BytesItems bytesItems;\\n        StringItems stringItems;\\n    }\\n\\n    struct AddressItems {\\n        AddressKeyValue[] items;\\n        AddressArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct UintItems {\\n        UintKeyValue[] items;\\n        UintArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct IntItems {\\n        IntKeyValue[] items;\\n        IntArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BoolItems {\\n        BoolKeyValue[] items;\\n        BoolArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct Bytes32Items {\\n        Bytes32KeyValue[] items;\\n        Bytes32ArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BytesItems {\\n        BytesKeyValue[] items;\\n        BytesArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct StringItems {\\n        StringKeyValue[] items;\\n        StringArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct AddressKeyValue {\\n        string key;\\n        address value;\\n    }\\n\\n    struct AddressArrayKeyValue {\\n        string key;\\n        address[] value;\\n    }\\n\\n    struct UintKeyValue {\\n        string key;\\n        uint256 value;\\n    }\\n\\n    struct UintArrayKeyValue {\\n        string key;\\n        uint256[] value;\\n    }\\n\\n    struct IntKeyValue {\\n        string key;\\n        int256 value;\\n    }\\n\\n    struct IntArrayKeyValue {\\n        string key;\\n        int256[] value;\\n    }\\n\\n    struct BoolKeyValue {\\n        string key;\\n        bool value;\\n    }\\n\\n    struct BoolArrayKeyValue {\\n        string key;\\n        bool[] value;\\n    }\\n\\n    struct Bytes32KeyValue {\\n        string key;\\n        bytes32 value;\\n    }\\n\\n    struct Bytes32ArrayKeyValue {\\n        string key;\\n        bytes32[] value;\\n    }\\n\\n    struct BytesKeyValue {\\n        string key;\\n        bytes value;\\n    }\\n\\n    struct BytesArrayKeyValue {\\n        string key;\\n        bytes[] value;\\n    }\\n\\n    struct StringKeyValue {\\n        string key;\\n        string value;\\n    }\\n\\n    struct StringArrayKeyValue {\\n        string key;\\n        string[] value;\\n    }\\n\\n    function initItems(AddressItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.AddressKeyValue[](size);\\n    }\\n\\n    function initArrayItems(AddressItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.AddressArrayKeyValue[](size);\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(UintItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.UintKeyValue[](size);\\n    }\\n\\n    function initArrayItems(UintItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.UintArrayKeyValue[](size);\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(IntItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.IntKeyValue[](size);\\n    }\\n\\n    function initArrayItems(IntItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.IntArrayKeyValue[](size);\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(BoolItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BoolKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BoolItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BoolArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.Bytes32KeyValue[](size);\\n    }\\n\\n    function initArrayItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.Bytes32ArrayKeyValue[](size);\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(BytesItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BytesKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BytesItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BytesArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(StringItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.StringKeyValue[](size);\\n    }\\n\\n    function initArrayItems(StringItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.StringArrayKeyValue[](size);\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n}\\n\",\"keccak256\":\"0x42c23cd06e17a2eb9c6d86015316f42acef002eaab1010aad9df98450523bad9\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketEventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../event/EventUtils.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nimport \\\"./MarketPoolValueInfo.sol\\\";\\n\\nlibrary MarketEventUtils {\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    // this event is emitted before a deposit or withdrawal\\n    // it provides information of the pool state so that the amount\\n    // of market tokens minted or amount withdrawn from the pool can be checked\\n    function emitMarketPoolValueInfo(\\n        EventEmitter eventEmitter,\\n        bytes32 tradeKey,\\n        address market,\\n        MarketPoolValueInfo.Props memory props,\\n        uint256 marketTokensSupply\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"tradeKey\\\", tradeKey);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.intItems.initItems(4);\\n        eventData.intItems.setItem(0, \\\"poolValue\\\", props.poolValue);\\n        eventData.intItems.setItem(1, \\\"longPnl\\\", props.longPnl);\\n        eventData.intItems.setItem(2, \\\"shortPnl\\\", props.shortPnl);\\n        eventData.intItems.setItem(3, \\\"netPnl\\\", props.netPnl);\\n\\n        eventData.uintItems.initItems(8);\\n        eventData.uintItems.setItem(0, \\\"longTokenAmount\\\", props.longTokenAmount);\\n        eventData.uintItems.setItem(1, \\\"shortTokenAmount\\\", props.shortTokenAmount);\\n        eventData.uintItems.setItem(2, \\\"longTokenUsd\\\", props.longTokenUsd);\\n        eventData.uintItems.setItem(3, \\\"shortTokenUsd\\\", props.shortTokenUsd);\\n        eventData.uintItems.setItem(4, \\\"totalBorrowingFees\\\", props.totalBorrowingFees);\\n        eventData.uintItems.setItem(5, \\\"borrowingFeePoolFactor\\\", props.borrowingFeePoolFactor);\\n        eventData.uintItems.setItem(6, \\\"impactPoolAmount\\\", props.impactPoolAmount);\\n        eventData.uintItems.setItem(7, \\\"marketTokensSupply\\\", marketTokensSupply);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"MarketPoolValueInfo\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    // this event is emitted after a deposit or withdrawal\\n    // it provides information of the updated pool state\\n    // note that the pool state can change even without a deposit / withdrawal\\n    // e.g. borrowing fees can increase the pool's value with time, trader pnl\\n    // will change as index prices change\\n    function emitMarketPoolValueUpdated(\\n        EventEmitter eventEmitter,\\n        bytes32 tradeKey,\\n        address market,\\n        MarketPoolValueInfo.Props memory props,\\n        uint256 marketTokensSupply\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"tradeKey\\\", tradeKey);\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.intItems.initItems(4);\\n        eventData.intItems.setItem(0, \\\"poolValue\\\", props.poolValue);\\n        eventData.intItems.setItem(1, \\\"longPnl\\\", props.longPnl);\\n        eventData.intItems.setItem(2, \\\"shortPnl\\\", props.shortPnl);\\n        eventData.intItems.setItem(3, \\\"netPnl\\\", props.netPnl);\\n\\n        eventData.uintItems.initItems(8);\\n        eventData.uintItems.setItem(0, \\\"longTokenAmount\\\", props.longTokenAmount);\\n        eventData.uintItems.setItem(1, \\\"shortTokenAmount\\\", props.shortTokenAmount);\\n        eventData.uintItems.setItem(2, \\\"longTokenUsd\\\", props.longTokenUsd);\\n        eventData.uintItems.setItem(3, \\\"shortTokenUsd\\\", props.shortTokenUsd);\\n        eventData.uintItems.setItem(4, \\\"totalBorrowingFees\\\", props.totalBorrowingFees);\\n        eventData.uintItems.setItem(5, \\\"borrowingFeePoolFactor\\\", props.borrowingFeePoolFactor);\\n        eventData.uintItems.setItem(6, \\\"impactPoolAmount\\\", props.impactPoolAmount);\\n        eventData.uintItems.setItem(7, \\\"marketTokensSupply\\\", marketTokensSupply);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"MarketPoolValueUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitPoolAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PoolAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitSwapImpactPoolAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"SwapImpactPoolAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitPositionImpactPoolDistributed(\\n        EventEmitter eventEmitter,\\n        address market,\\n        uint256 distributionAmount\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"distributionAmount\\\", distributionAmount);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PositionImpactPoolDistributed\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitPositionImpactPoolAmountUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"PositionImpactPoolAmountUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitOpenInterestUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"OpenInterestUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitVirtualSwapInventoryUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        bool isLongToken,\\n        bytes32 virtualMarketId,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLongToken\\\", isLongToken);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"virtualMarketId\\\", virtualMarketId);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"VirtualSwapInventoryUpdated\\\",\\n            Cast.toBytes32(market),\\n            virtualMarketId,\\n            eventData\\n        );\\n    }\\n\\n    function emitVirtualPositionInventoryUpdated(\\n        EventEmitter eventEmitter,\\n        address token,\\n        bytes32 virtualTokenId,\\n        int256 delta,\\n        int256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"token\\\", token);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"virtualTokenId\\\", virtualTokenId);\\n\\n        eventData.intItems.initItems(2);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.intItems.setItem(1, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"VirtualPositionInventoryUpdated\\\",\\n            Cast.toBytes32(token),\\n            virtualTokenId,\\n            eventData\\n        );\\n    }\\n\\n    function emitOpenInterestInTokensUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"OpenInterestInTokensUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitCollateralSumUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        int256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.intItems.initItems(1);\\n        eventData.intItems.setItem(0, \\\"delta\\\", delta);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"CollateralSumUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitBorrowingFactorUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        bool isLong,\\n        uint256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"CumulativeBorrowingFactorUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitFundingFeeAmountPerSizeUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 delta,\\n        uint256 value\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"value\\\", value);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"FundingFeeAmountPerSizeUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableFundingAmountPerSizeUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address collateralToken,\\n        bool isLong,\\n        uint256 delta,\\n        uint256 value\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"collateralToken\\\", collateralToken);\\n\\n        eventData.boolItems.initItems(1);\\n        eventData.boolItems.setItem(0, \\\"isLong\\\", isLong);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"value\\\", value);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableFundingAmountPerSizeUpdated\\\",\\n            Cast.toBytes32(market),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableFundingUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        uint256 delta,\\n        uint256 nextValue,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(1, \\\"nextValue\\\", nextValue);\\n        eventData.uintItems.setItem(2, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableFundingUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitFundingFeesClaimed(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        address account,\\n        address receiver,\\n        uint256 amount,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(4);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n        eventData.addressItems.setItem(3, \\\"receiver\\\", receiver);\\n\\n        eventData.uintItems.initItems(2);\\n        eventData.uintItems.setItem(0, \\\"amount\\\", amount);\\n        eventData.uintItems.setItem(1, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"FundingFeesClaimed\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableFundingUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 timeKey,\\n        address account,\\n        uint256 delta,\\n        uint256 nextValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"timeKey\\\", timeKey);\\n        eventData.uintItems.setItem(1, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(2, \\\"nextValue\\\", nextValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableFundingUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitClaimableCollateralUpdated(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 timeKey,\\n        address account,\\n        uint256 delta,\\n        uint256 nextValue,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(3);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(4);\\n        eventData.uintItems.setItem(0, \\\"timeKey\\\", timeKey);\\n        eventData.uintItems.setItem(1, \\\"delta\\\", delta);\\n        eventData.uintItems.setItem(2, \\\"nextValue\\\", nextValue);\\n        eventData.uintItems.setItem(3, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"ClaimableCollateralUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitCollateralClaimed(\\n        EventEmitter eventEmitter,\\n        address market,\\n        address token,\\n        uint256 timeKey,\\n        address account,\\n        address receiver,\\n        uint256 amount,\\n        uint256 nextPoolValue\\n    ) external {\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(4);\\n        eventData.addressItems.setItem(0, \\\"market\\\", market);\\n        eventData.addressItems.setItem(1, \\\"token\\\", token);\\n        eventData.addressItems.setItem(2, \\\"account\\\", account);\\n        eventData.addressItems.setItem(3, \\\"receiver\\\", receiver);\\n\\n        eventData.uintItems.initItems(3);\\n        eventData.uintItems.setItem(0, \\\"timeKey\\\", timeKey);\\n        eventData.uintItems.setItem(1, \\\"amount\\\", amount);\\n        eventData.uintItems.setItem(2, \\\"nextPoolValue\\\", nextPoolValue);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"CollateralClaimed\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n\\n    function emitUiFeeFactorUpdated(\\n        EventEmitter eventEmitter,\\n        address account,\\n        uint256 uiFeeFactor\\n    ) external {\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(1);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"uiFeeFactor\\\", uiFeeFactor);\\n\\n        eventEmitter.emitEventLog1(\\n            \\\"UiFeeFactorUpdated\\\",\\n            Cast.toBytes32(account),\\n            eventData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xfaa84268c53c697e32a2d681af126031cbc24378181d607b78df974032e97494\",\"license\":\"BUSL-1.1\"},\"contracts/market/MarketPoolValueInfo.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title MarketPoolInfo\\nlibrary MarketPoolValueInfo {\\n    // @dev struct to avoid stack too deep errors for the getPoolValue call\\n    // @param value the pool value\\n    // @param longTokenAmount the amount of long token in the pool\\n    // @param shortTokenAmount the amount of short token in the pool\\n    // @param longTokenUsd the USD value of the long tokens in the pool\\n    // @param shortTokenUsd the USD value of the short tokens in the pool\\n    // @param totalBorrowingFees the total pending borrowing fees for the market\\n    // @param borrowingFeePoolFactor the pool factor for borrowing fees\\n    // @param impactPoolAmount the amount of tokens in the impact pool\\n    // @param longPnl the pending pnl of long positions\\n    // @param shortPnl the pending pnl of short positions\\n    // @param netPnl the net pnl of long and short positions\\n    struct Props {\\n        int256 poolValue;\\n        int256 longPnl;\\n        int256 shortPnl;\\n        int256 netPnl;\\n\\n        uint256 longTokenAmount;\\n        uint256 shortTokenAmount;\\n        uint256 longTokenUsd;\\n        uint256 shortTokenUsd;\\n\\n        uint256 totalBorrowingFees;\\n        uint256 borrowingFeePoolFactor;\\n\\n        uint256 impactPoolAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xcb7e29fde7da11b634235ba9845fafcbab8a6cdd2c882221bc9e6196b5fd39a4\",\"license\":\"BUSL-1.1\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Role\\n * @dev Library for role keys\\n */\\nlibrary Role {\\n    /**\\n     * @dev The ROLE_ADMIN role.\\n     */\\n    bytes32 public constant ROLE_ADMIN = keccak256(abi.encode(\\\"ROLE_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_ADMIN role.\\n     */\\n    bytes32 public constant TIMELOCK_ADMIN = keccak256(abi.encode(\\\"TIMELOCK_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_MULTISIG role.\\n     */\\n    bytes32 public constant TIMELOCK_MULTISIG = keccak256(abi.encode(\\\"TIMELOCK_MULTISIG\\\"));\\n\\n    /**\\n     * @dev The CONFIG_KEEPER role.\\n     */\\n    bytes32 public constant CONFIG_KEEPER = keccak256(abi.encode(\\\"CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The CONTROLLER role.\\n     */\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The ROUTER_PLUGIN role.\\n     */\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\n\\n    /**\\n     * @dev The MARKET_KEEPER role.\\n     */\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_KEEPER role.\\n     */\\n    bytes32 public constant FEE_KEEPER = keccak256(abi.encode(\\\"FEE_KEEPER\\\"));\\n\\n    /**\\n     * @dev The ORDER_KEEPER role.\\n     */\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FROZEN_ORDER_KEEPER role.\\n     */\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The PRICING_KEEPER role.\\n     */\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\n    /**\\n     * @dev The LIQUIDATION_KEEPER role.\\n     */\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\n    /**\\n     * @dev The ADL_KEEPER role.\\n     */\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\n}\\n\",\"keccak256\":\"0x274c57667c715caa0b5b476ca0a46da20de5fbe2a882203e8c418799fd1302ca\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleStore.sol\\\";\\n\\n/**\\n * @title RoleModule\\n * @dev Contract for role validation functions\\n */\\ncontract RoleModule {\\n    RoleStore public immutable roleStore;\\n\\n    /**\\n     * @dev Constructor that initializes the role store for this contract.\\n     *\\n     * @param _roleStore The contract instance to use as the role store.\\n     */\\n    constructor(RoleStore _roleStore) {\\n        roleStore = _roleStore;\\n    }\\n\\n    /**\\n     * @dev Only allows the contract's own address to call the function.\\n     */\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"SELF\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_MULTISIG role to call the function.\\n     */\\n    modifier onlyTimelockMultisig() {\\n        _validateRole(Role.TIMELOCK_MULTISIG, \\\"TIMELOCK_MULTISIG\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_ADMIN role to call the function.\\n     */\\n    modifier onlyTimelockAdmin() {\\n        _validateRole(Role.TIMELOCK_ADMIN, \\\"TIMELOCK_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONFIG_KEEPER role to call the function.\\n     */\\n    modifier onlyConfigKeeper() {\\n        _validateRole(Role.CONFIG_KEEPER, \\\"CONFIG_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTROLLER role to call the function.\\n     */\\n    modifier onlyController() {\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ROUTER_PLUGIN role to call the function.\\n     */\\n    modifier onlyRouterPlugin() {\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the MARKET_KEEPER role to call the function.\\n     */\\n    modifier onlyMarketKeeper() {\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeKeeper() {\\n        _validateRole(Role.FEE_KEEPER, \\\"FEE_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ORDER_KEEPER role to call the function.\\n     */\\n    modifier onlyOrderKeeper() {\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the PRICING_KEEPER role to call the function.\\n     */\\n    modifier onlyPricingKeeper() {\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the LIQUIDATION_KEEPER role to call the function.\\n     */\\n    modifier onlyLiquidationKeeper() {\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ADL_KEEPER role to call the function.\\n     */\\n    modifier onlyAdlKeeper() {\\n        _validateRole(Role.ADL_KEEPER, \\\"ADL_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Validates that the caller has the specified role.\\n     *\\n     * If the caller does not have the specified role, the transaction is reverted.\\n     *\\n     * @param role The key of the role to validate.\\n     * @param roleName The name of the role to validate.\\n     */\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\n        if (!roleStore.hasRole(msg.sender, role)) {\\n            revert Errors.Unauthorized(msg.sender, roleName);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa5d3ead0543d4ef828baa1e833cc0969c31412965d65e2f9771e202637075325\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"./Role.sol\\\";\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title RoleStore\\n * @dev Stores roles and their members.\\n */\\ncontract RoleStore {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    modifier onlyRoleAdmin() {\\n        if (!hasRole(msg.sender, Role.ROLE_ADMIN)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"ROLE_ADMIN\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _grantRole(msg.sender, Role.ROLE_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Grants the specified role to the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to grant.\\n     */\\n    function grantRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _grantRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Revokes the specified role from the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to revoke.\\n     */\\n    function revokeRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _revokeRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Returns true if the given account has the specified role.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role.\\n     * @return True if the account has the role, false otherwise.\\n     */\\n    function hasRole(address account, bytes32 roleKey) public view returns (bool) {\\n        return roleCache[account][roleKey];\\n    }\\n\\n    /**\\n     * @dev Returns the number of roles stored in the contract.\\n     *\\n     * @return The number of roles.\\n     */\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    /**\\n     * @dev Returns the keys of the roles stored in the contract.\\n     *\\n     * @param start The starting index of the range of roles to return.\\n     * @param end The ending index of the range of roles to return.\\n     * @return The keys of the roles.\\n     */\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    /**\\n     * @dev Returns the number of members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @return The number of members of the role.\\n     */\\n    function getRoleMemberCount(bytes32 roleKey) external view returns (uint256) {\\n        return roleMembers[roleKey].length();\\n    }\\n\\n    /**\\n     * @dev Returns the members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @param start the start index, the value for this index will be included.\\n     * @param end the end index, the value for this index will not be included.\\n     * @return The members of the role.\\n     */\\n    function getRoleMembers(bytes32 roleKey, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[roleKey].valuesAt(start, end);\\n    }\\n\\n    function _grantRole(address account, bytes32 roleKey) internal {\\n        roles.add(roleKey);\\n        roleMembers[roleKey].add(account);\\n        roleCache[account][roleKey] = true;\\n    }\\n\\n    function _revokeRole(address account, bytes32 roleKey) internal {\\n        roleMembers[roleKey].remove(account);\\n        roleCache[account][roleKey] = false;\\n\\n        if (roleMembers[roleKey].length() == 0) {\\n            if (roleKey == Role.ROLE_ADMIN) {\\n                revert Errors.ThereMustBeAtLeastOneRoleAdmin();\\n            }\\n            if (roleKey == Role.TIMELOCK_MULTISIG) {\\n                revert Errors.ThereMustBeAtLeastOneTimelockMultiSig();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa7be1876450ec19568c0e12e4238332c96eb921974a19c0e4a6fe1fb943bf6d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Cast.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Cast\\n * @dev Library for casting functions\\n */\\nlibrary Cast {\\n    function toBytes32(address value) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(value)));\\n    }\\n}\\n\",\"keccak256\":\"0x873841fcb56173678e4584c2fcec648b98bc7d9f2c96906750791c19a3372c9b\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title EnumerableValues\\n * @dev Library to extend the EnumerableSet library with functions to get\\n * valuesAt for a range\\n */\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * Returns an array of bytes32 values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of bytes32 values.\\n     */\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of address values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of address values.\\n     */\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of uint256 values from the given set, starting at the given\\n     * start index and ending before the given end index, the item at the end index will not be returned.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index (inclusive, item at the start index will be returned).\\n     * @param end The ending index (exclusive, item at the end index will not be returned).\\n     * @return An array of uint256 values.\\n     */\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        if (start >= set.length()) {\\n            return new uint256[](0);\\n        }\\n\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x1e525ad5645bc649551fa3a7d000af1cec96221d7fe1cdc17cedaf942b018f0d\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x613c7f61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101065760003560e01c8063061034701461010b5780630aa77b6a1461012d5780631daaefa11461014d5780631f20ad331461016d57806328d445cb1461018d57806346ff7f44146101ad57806347bc6453146101cd5780634c7c4a6d146101ed5780634ee4c8311461020d578063555a99791461022d5780636d6b20591461024d5780637ea1cfff1461026d57806386f48e481461028d5780638983b3ff146102ad578063a814bb6f146102cd578063b3d188de146102ed578063d206b7051461030d578063d33c81ab1461032d578063d52463b21461034d578063d791fbb31461036d575b600080fd5b81801561011757600080fd5b5061012b61012636600461279d565b61038d565b005b81801561013957600080fd5b5061012b610148366004612809565b610535565b81801561015957600080fd5b5061012b610168366004612809565b61069a565b81801561017957600080fd5b5061012b610188366004612864565b6107c5565b81801561019957600080fd5b5061012b6101a836600461279d565b610997565b8180156101b957600080fd5b5061012b6101c83660046128db565b610b0b565b8180156101d957600080fd5b5061012b6101e836600461279d565b610c0a565b8180156101f957600080fd5b5061012b61020836600461291c565b610d7e565b81801561021957600080fd5b5061012b610228366004612996565b610ef0565b81801561023957600080fd5b5061012b6102483660046129fc565b611078565b81801561025957600080fd5b5061012b61026836600461279d565b6111b1565b81801561027957600080fd5b5061012b610288366004612a8f565b61131e565b81801561029957600080fd5b5061012b6102a8366004612b74565b611710565b8180156102b957600080fd5b5061012b6102c8366004612bc5565b61183b565b8180156102d957600080fd5b5061012b6102e8366004612c46565b611a49565b8180156102f957600080fd5b5061012b610308366004612ca9565b611bd7565b81801561031957600080fd5b5061012b610328366004612d35565b611d9a565b81801561033957600080fd5b5061012b6103483660046128db565b611ed6565b81801561035957600080fd5b5061012b610368366004612a8f565b611fa3565b81801561037957600080fd5b5061012b61038836600461279d565b612395565b61039561267f565b80516103a2906002612509565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516103ce916000908961256e565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b60208201528151610403916001908861256e565b6060810151610413906001612509565b60408051808201909152600681526569734c6f6e6760d01b6020820152606082015161044291600090876125cb565b6020810151610452906002612509565b61048b60006040518060400160405280600581526020016464656c746160d81b815250858460200151612620909392919063ffffffff16565b6104c460016040518060400160405280600581526020016476616c756560d81b815250848460200151612620909392919063ffffffff16565b866001600160a01b03166324de01e46104dc88612673565b836040518363ffffffff1660e01b81526004016104fa9291906136bc565b600060405180830381600087803b15801561051457600080fd5b505af1158015610528573d6000803e3d6000fd5b5050505050505050505050565b61053d61267f565b805161054a906002612509565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610576916000908861256e565b6040805180820190915260058152643a37b5b2b760d91b602082015281516105a1916001908761256e565b60408101516105b1906001612509565b604080518082018252600581526464656c746160d81b6020820152908201516105dd9160009086612620565b60208101516105ed906001612509565b61062a6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612620909392919063ffffffff16565b856001600160a01b03166324de01e461064287612673565b836040518363ffffffff1660e01b8152600401610660929190613711565b600060405180830381600087803b15801561067a57600080fd5b505af115801561068e573d6000803e3d6000fd5b50505050505050505050565b6106a261267f565b80516106af906002612509565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516106db916000908861256e565b6040805180820190915260058152643a37b5b2b760d91b60208201528151610706916001908761256e565b6040810151610716906001612509565b604080518082018252600581526464656c746160d81b6020820152908201516107429160009086612620565b6020810151610752906001612509565b61078f6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612620909392919063ffffffff16565b856001600160a01b03166324de01e46107a787612673565b836040518363ffffffff1660e01b815260040161066092919061375c565b6107cd61267f565b80516107da906003612509565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610806916000908a61256e565b6040805180820190915260058152643a37b5b2b760d91b60208201528151610831916001908961256e565b6040805180820190915260078152661858d8dbdd5b9d60ca1b6020820152815161085e916002908861256e565b602081015161086e906003612509565b6108a760006040518060400160405280600581526020016464656c746160d81b815250868460200151612620909392919063ffffffff16565b6108e46001604051806040016040528060098152602001686e65787456616c756560b81b815250858460200151612620909392919063ffffffff16565b61092560026040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612620909392919063ffffffff16565b876001600160a01b03166324de01e461093d87612673565b836040518363ffffffff1660e01b815260040161095b92919061379d565b600060405180830381600087803b15801561097557600080fd5b505af1158015610989573d6000803e3d6000fd5b505050505050505050505050565b61099f61267f565b80516109ac906002612509565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516109d8916000908961256e565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b60208201528151610a0d916001908861256e565b6060810151610a1d906001612509565b60408051808201909152600681526569734c6f6e6760d01b60208201526060820151610a4c91600090876125cb565b6040810151610a5c906001612509565b604080518082018252600581526464656c746160d81b602082015290820151610a889160009086612620565b6020810151610a98906001612509565b610ad56000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612620909392919063ffffffff16565b866001600160a01b03166324de01e4610aed88612673565b836040518363ffffffff1660e01b81526004016104fa9291906137e4565b610b1361267f565b8051610b20906001612509565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151610b4d916000908661256e565b6020810151610b5d906001612509565b610b9c60006040518060400160405280600b81526020016a3ab4a332b2a330b1ba37b960a91b815250848460200151612620909392919063ffffffff16565b836001600160a01b03166324de01e4610bb485612673565b836040518363ffffffff1660e01b8152600401610bd2929190613827565b600060405180830381600087803b158015610bec57600080fd5b505af1158015610c00573d6000803e3d6000fd5b5050505050505050565b610c1261267f565b8051610c1f906002612509565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610c4b916000908961256e565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b60208201528151610c80916001908861256e565b6060810151610c90906001612509565b60408051808201909152600681526569734c6f6e6760d01b60208201526060820151610cbf91600090876125cb565b6040810151610ccf906001612509565b604080518082018252600581526464656c746160d81b602082015290820151610cfb9160009086612620565b6020810151610d0b906001612509565b610d486000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612620909392919063ffffffff16565b866001600160a01b03166324de01e4610d6088612673565b836040518363ffffffff1660e01b81526004016104fa929190613869565b610d8661267f565b8051610d93906003612509565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610dbf916000908a61256e565b6040805180820190915260058152643a37b5b2b760d91b60208201528151610dea916001908961256e565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151610e17916002908761256e565b6020810151610e27906003612509565b610e6260006040518060400160405280600781526020016674696d654b657960c81b815250878460200151612620909392919063ffffffff16565b610e9b60016040518060400160405280600581526020016464656c746160d81b815250858460200151612620909392919063ffffffff16565b610ed86002604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612620909392919063ffffffff16565b876001600160a01b03166324de01e461093d86612673565b610ef861267f565b8051610f05906004612509565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151610f31916000908a61256e565b6040805180820190915260058152643a37b5b2b760d91b60208201528151610f5c916001908961256e565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151610f89916002908861256e565b6040805180820190915260088152673932b1b2b4bb32b960c11b60208201528151610fb7916003908761256e565b6020810151610fc7906002612509565b611001600060405180604001604052806006815260200165185b5bdd5b9d60d21b815250858460200151612620909392919063ffffffff16565b61104260016040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612620909392919063ffffffff16565b876001600160a01b03166324de01e461105a87612673565b836040518363ffffffff1660e01b815260040161095b9291906138ad565b61108061267f565b805161108d906001612509565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516110b9916000908761256e565b60408101516110c9906001612509565b604080518082018252600581526464656c746160d81b6020820152908201516110f59160009086612620565b6020810151611105906001612509565b6111426000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612620909392919063ffffffff16565b846001600160a01b03166324de01e461115a86612673565b836040518363ffffffff1660e01b81526004016111789291906138ef565b600060405180830381600087803b15801561119257600080fd5b505af11580156111a6573d6000803e3d6000fd5b505050505050505050565b6111b961267f565b80516111c6906002612509565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516111f2916000908961256e565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b60208201528151611227916001908861256e565b6060810151611237906001612509565b60408051808201909152600681526569734c6f6e6760d01b6020820152606082015161126691600090876125cb565b6020810151611276906002612509565b6112af60006040518060400160405280600581526020016464656c746160d81b815250858460200151612620909392919063ffffffff16565b6112e860016040518060400160405280600581526020016476616c756560d81b815250848460200151612620909392919063ffffffff16565b866001600160a01b03166324de01e461130088612673565b836040518363ffffffff1660e01b81526004016104fa92919061393c565b61132661267f565b6080810151611336906001612509565b60408051808201909152600881526774726164654b657960c01b602082015260808201516113679160009088612620565b8051611374906001612509565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516113a0916000908761256e565b60408101516113b0906004612509565b6040805180820182526009815268706f6f6c56616c756560b81b60208201528451918301516113e3929091600091612620565b6114226001604051806040016040528060078152602001661b1bdb99d41b9b60ca1b81525085602001518460400151612620909392919063ffffffff16565b60408051808201825260088152671cda1bdc9d141b9b60c21b60208201528482015191830151611456929091600291612620565b60408051808201825260068152651b995d141b9b60d21b6020820152606085015191830151611489929091600391612620565b6020810151611499906008612509565b6114e060006040518060400160405280600f81526020016e1b1bdb99d51bdad95b905b5bdd5b9d608a1b81525085608001518460200151612620909392919063ffffffff16565b61152860016040518060400160405280601081526020016f1cda1bdc9d151bdad95b905b5bdd5b9d60821b8152508560a001518460200151612620909392919063ffffffff16565b61156c60026040518060400160405280600c81526020016b1b1bdb99d51bdad95b955cd960a21b8152508560c001518460200151612620909392919063ffffffff16565b6115b160036040518060400160405280600d81526020016c1cda1bdc9d151bdad95b955cd9609a1b8152508560e001518460200151612620909392919063ffffffff16565b6115fc600460405180604001604052806012815260200171746f74616c426f72726f77696e674665657360701b8152508561010001518460200151612620909392919063ffffffff16565b61164b6005604051806040016040528060168152602001753137b93937bbb4b733a332b2a837b7b62330b1ba37b960511b8152508561012001518460200151612620909392919063ffffffff16565b61169460066040518060400160405280601081526020016f1a5b5c1858dd141bdbdb105b5bdd5b9d60821b8152508561014001518460200151612620909392919063ffffffff16565b6116da6007604051806040016040528060128152602001716d61726b6574546f6b656e73537570706c7960701b815250848460200151612620909392919063ffffffff16565b856001600160a01b03166324de01e46116f286612673565b836040518363ffffffff1660e01b8152600401610660929190613996565b61171861267f565b8051611725906001612509565b6040805180820190915260058152643a37b5b2b760d91b60208201528151611750916000908861256e565b6080810151611760906001612509565b60408051808201909152600e81526d1d9a5c9d1d585b151bdad95b925960921b602082015260808201516117979160009087612620565b60408101516117a7906002612509565b604080518082018252600581526464656c746160d81b6020820152908201516117d39160009086612620565b60408051808201825260098152686e65787456616c756560b81b6020820152908201516118039160019085612620565b856001600160a01b03166363d1636361181b87612673565b86846040518463ffffffff1660e01b8152600401610660939291906139dc565b61184361267f565b8051611850906003612509565b6040805180820190915260068152651b585c9ad95d60d21b6020820152815161187c916000908b61256e565b6040805180820190915260058152643a37b5b2b760d91b602082015281516118a7916001908a61256e565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516118d4916002908861256e565b60208101516118e4906004612509565b61191f60006040518060400160405280600781526020016674696d654b657960c81b815250888460200151612620909392919063ffffffff16565b61195860016040518060400160405280600581526020016464656c746160d81b815250868460200151612620909392919063ffffffff16565b6119956002604051806040016040528060098152602001686e65787456616c756560b81b815250858460200151612620909392919063ffffffff16565b6119d660036040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612620909392919063ffffffff16565b886001600160a01b03166324de01e46119ee87612673565b836040518363ffffffff1660e01b8152600401611a0c929190613a2f565b600060405180830381600087803b158015611a2657600080fd5b505af1158015611a3a573d6000803e3d6000fd5b50505050505050505050505050565b611a5161267f565b8051611a5e906001612509565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611a8a916000908961256e565b6060810151611a9a906001612509565b60408051808201909152600b81526a34b9a637b733aa37b5b2b760a91b60208201526060820151611ace91600090886125cb565b6080810151611ade906001612509565b60408051808201909152600f81526e1d9a5c9d1d585b13585c9ad95d1259608a1b60208201526080820151611b169160009087612620565b6040810151611b26906001612509565b604080518082018252600581526464656c746160d81b602082015290820151611b529160009086612620565b6020810151611b62906001612509565b611b9f6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612620909392919063ffffffff16565b866001600160a01b03166363d16363611bb788612673565b86846040518463ffffffff1660e01b81526004016104fa93929190613a79565b611bdf61267f565b8051611bec906004612509565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611c18916000908b61256e565b6040805180820190915260058152643a37b5b2b760d91b60208201528151611c43916001908a61256e565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151611c70916002908861256e565b6040805180820190915260088152673932b1b2b4bb32b960c11b60208201528151611c9e916003908761256e565b6020810151611cae906003612509565b611ce960006040518060400160405280600781526020016674696d654b657960c81b815250888460200151612620909392919063ffffffff16565b611d23600160405180604001604052806006815260200165185b5bdd5b9d60d21b815250858460200151612620909392919063ffffffff16565b611d6460026040518060400160405280600d81526020016c6e657874506f6f6c56616c756560981b815250848460200151612620909392919063ffffffff16565b886001600160a01b03166324de01e4611d7c87612673565b836040518363ffffffff1660e01b8152600401611a0c929190613aca565b611da261267f565b8051611daf906001612509565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611ddb916000908861256e565b6060810151611deb906001612509565b60408051808201909152600681526569734c6f6e6760d01b60208201526060820151611e1a91600090876125cb565b6020810151611e2a906002612509565b611e6360006040518060400160405280600581526020016464656c746160d81b815250858460200151612620909392919063ffffffff16565b611ea06001604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612620909392919063ffffffff16565b856001600160a01b03166324de01e4611eb887612673565b836040518363ffffffff1660e01b8152600401610660929190613b0b565b611ede61267f565b8051611eeb906001612509565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151611f17916000908661256e565b6020810151611f27906001612509565b611f6d600060405180604001604052806012815260200171191a5cdd1c9a589d5d1a5bdb905b5bdd5b9d60721b815250848460200151612620909392919063ffffffff16565b836001600160a01b03166324de01e4611f8585612673565b836040518363ffffffff1660e01b8152600401610bd2929190613b58565b611fab61267f565b6080810151611fbb906001612509565b60408051808201909152600881526774726164654b657960c01b60208201526080820151611fec9160009088612620565b8051611ff9906001612509565b6040805180820190915260068152651b585c9ad95d60d21b60208201528151612025916000908761256e565b6040810151612035906004612509565b6040805180820182526009815268706f6f6c56616c756560b81b6020820152845191830151612068929091600091612620565b6120a76001604051806040016040528060078152602001661b1bdb99d41b9b60ca1b81525085602001518460400151612620909392919063ffffffff16565b60408051808201825260088152671cda1bdc9d141b9b60c21b602082015284820151918301516120db929091600291612620565b60408051808201825260068152651b995d141b9b60d21b602082015260608501519183015161210e929091600391612620565b602081015161211e906008612509565b61216560006040518060400160405280600f81526020016e1b1bdb99d51bdad95b905b5bdd5b9d608a1b81525085608001518460200151612620909392919063ffffffff16565b6121ad60016040518060400160405280601081526020016f1cda1bdc9d151bdad95b905b5bdd5b9d60821b8152508560a001518460200151612620909392919063ffffffff16565b6121f160026040518060400160405280600c81526020016b1b1bdb99d51bdad95b955cd960a21b8152508560c001518460200151612620909392919063ffffffff16565b61223660036040518060400160405280600d81526020016c1cda1bdc9d151bdad95b955cd9609a1b8152508560e001518460200151612620909392919063ffffffff16565b612281600460405180604001604052806012815260200171746f74616c426f72726f77696e674665657360701b8152508561010001518460200151612620909392919063ffffffff16565b6122d06005604051806040016040528060168152602001753137b93937bbb4b733a332b2a837b7b62330b1ba37b960511b8152508561012001518460200151612620909392919063ffffffff16565b61231960066040518060400160405280601081526020016f1a5b5c1858dd141bdbdb105b5bdd5b9d60821b8152508561014001518460200151612620909392919063ffffffff16565b61235f6007604051806040016040528060128152602001716d61726b6574546f6b656e73537570706c7960701b815250848460200151612620909392919063ffffffff16565b856001600160a01b03166324de01e461237786612673565b836040518363ffffffff1660e01b8152600401610660929190613ba5565b61239d61267f565b80516123aa906002612509565b6040805180820190915260068152651b585c9ad95d60d21b602082015281516123d6916000908961256e565b60408051808201909152600f81526e31b7b63630ba32b930b62a37b5b2b760891b6020820152815161240b916001908861256e565b606081015161241b906001612509565b60408051808201909152600681526569734c6f6e6760d01b6020820152606082015161244a91600090876125cb565b604081015161245a906001612509565b604080518082018252600581526464656c746160d81b6020820152908201516124869160009086612620565b6020810151612496906001612509565b6124d36000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151612620909392919063ffffffff16565b866001600160a01b03166324de01e46124eb88612673565b836040518363ffffffff1660e01b81526004016104fa929190613be8565b806001600160401b0381111561252157612521612a42565b60405190808252806020026020018201604052801561256757816020015b60408051808201909152606081526000602082015281526020019060019003908161253f5790505b5090915250565b818460000151848151811061258557612585613c33565b60200260200101516000018190525080846000015184815181106125ab576125ab613c33565b6020908102919091018101516001600160a01b0390921691015250505050565b81846000015184815181106125e2576125e2613c33565b602002602001015160000181905250808460000151848151811061260857612608613c33565b60209081029190910181015191151591015250505050565b818460000151848151811061263757612637613c33565b602002602001015160000181905250808460000151848151811061265d5761265d613c33565b6020026020010151602001818152505050505050565b6001600160a01b031690565b604080516101208101909152606060e08201818152610100830191909152819081526020016126c1604051806040016040528060608152602001606081525090565b81526020016126e3604051806040016040528060608152602001606081525090565b8152602001612705604051806040016040528060608152602001606081525090565b8152602001612727604051806040016040528060608152602001606081525090565b8152602001612749604051806040016040528060608152602001606081525090565b815260200161276b604051806040016040528060608152602001606081525090565b905290565b6001600160a01b038116811461278557600080fd5b50565b8035801515811461279857600080fd5b919050565b60008060008060008060c087890312156127b657600080fd5b86356127c181612770565b955060208701356127d181612770565b945060408701356127e181612770565b93506127ef60608801612788565b92506080870135915060a087013590509295509295509295565b600080600080600060a0868803121561282157600080fd5b853561282c81612770565b9450602086013561283c81612770565b9350604086013561284c81612770565b94979396509394606081013594506080013592915050565b600080600080600080600060e0888a03121561287f57600080fd5b873561288a81612770565b9650602088013561289a81612770565b955060408801356128aa81612770565b945060608801356128ba81612770565b9699959850939660808101359560a0820135955060c0909101359350915050565b6000806000606084860312156128f057600080fd5b83356128fb81612770565b9250602084013561290b81612770565b929592945050506040919091013590565b600080600080600080600060e0888a03121561293757600080fd5b873561294281612770565b9650602088013561295281612770565b9550604088013561296281612770565b945060608801359350608088013561297981612770565b9699959850939692959460a0840135945060c09093013592915050565b600080600080600080600060e0888a0312156129b157600080fd5b87356129bc81612770565b965060208801356129cc81612770565b955060408801356129dc81612770565b945060608801356129ec81612770565b9350608088013561297981612770565b60008060008060808587031215612a1257600080fd5b8435612a1d81612770565b93506020850135612a2d81612770565b93969395505050506040820135916060013590565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715612a8957634e487b7160e01b600052604160045260246000fd5b60405290565b60008060008060008587036101e0811215612aa957600080fd5b8635612ab481612770565b9550602087013594506040870135612acb81612770565b9350610160605f198201811315612ae157600080fd5b612ae9612a58565b9150606088013582526080880135602083015260a0880135604083015260c0880135606083015260e088013560808301526101008089013560a0840152610120808a013560c0850152610140808b013560e0860152838b0135838601526101808b0135828601526101a08b01358186015250505050809250506101c086013590509295509295909350565b600080600080600060a08688031215612b8c57600080fd5b8535612b9781612770565b94506020860135612ba781612770565b94979496505050506040830135926060810135926080909101359150565b600080600080600080600080610100898b031215612be257600080fd5b8835612bed81612770565b97506020890135612bfd81612770565b96506040890135612c0d81612770565b9550606089013594506080890135612c2481612770565b979a969950949793969560a0850135955060c08501359460e001359350915050565b60008060008060008060c08789031215612c5f57600080fd5b8635612c6a81612770565b95506020870135612c7a81612770565b9450612c8860408801612788565b9350606087013592506080870135915060a087013590509295509295509295565b600080600080600080600080610100898b031215612cc657600080fd5b8835612cd181612770565b97506020890135612ce181612770565b96506040890135612cf181612770565b9550606089013594506080890135612d0881612770565b935060a0890135612d1881612770565b979a969950949793969295929450505060c08201359160e0013590565b600080600080600060a08688031215612d4d57600080fd5b8535612d5881612770565b94506020860135612d6881612770565b935061284c60408701612788565b6000815180845260005b81811015612d9c57602081850181015186830182015201612d80565b506000602082860101526020601f19601f83011685010191505092915050565b600081518084526020808501808196508360051b810191508286016000805b86811015612e57578385038a52825160408151818852612dfd82890182612d76565b92890151888403898b01528051808552908a01938693508a0191505b80831015612e425783516001600160a01b03168252928901926001929092019190890190612e19565b509b88019b9650505091850191600101612ddb565b509298975050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015612edc57898603605f1901845284518051888852612eb689890182612d76565b918401516001600160a01b03169784019790975295509381019392810192600101612e92565b50808801519550888503818a015250505050612ef88183612dbc565b95945050505050565b600081518084526020808501808196508360051b810191508286016000805b86811015612e57578385038a52825160408151818852612f4282890182612d76565b92890151888403898b01528051808552908a01938693508a0191505b80831015612f7e5783518252928901926001929092019190890190612f5e565b509b88019b9650505091850191600101612f20565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561300157898603605f1901845284518051888852612fe489890182612d76565b918401519784019790975295509381019392810192600101612fc0565b50808801519550888503818a015250505050612ef88183612f01565b600081518084526020808501808196508360051b810191508286016000805b86811015612e57578385038a5282516040815181885261305e82890182612d76565b92890151888403898b01528051808552908a01938693508a0191505b8083101561309a578351825292890192600192909201919089019061307a565b509b88019b965050509185019160010161303c565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561311d57898603605f190184528451805188885261310089890182612d76565b9184015197840197909752955093810193928101926001016130dc565b50808801519550888503818a015250505050612ef8818361301d565b600081518084526020808501808196508360051b810191508286016000805b86811015612e57578385038a5282516040815181885261317a82890182612d76565b92890151888403898b01528051808552908a01938693508a0191505b808310156131b857835115158252928901926001929092019190890190613196565b509b88019b9650505091850191600101613158565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561323d57898603605f190184528451805188885261321e89890182612d76565b91840151151597840197909752955093810193928101926001016131fa565b50808801519550888503818a015250505050612ef88183613139565b600081518084526020808501808196508360051b810191508286016000805b86811015612e57578385038a5282516040815181885261329a82890182612d76565b92890151888403898b01528051808552908a01938693508a0191505b808310156132d657835182529289019260019290920191908901906132b6565b509b88019b9650505091850191600101613278565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561335957898603605f190184528451805188885261333c89890182612d76565b918401519784019790975295509381019392810192600101613318565b50808801519550888503818a015250505050612ef88183613259565b600081518084526020808501808196506005915083821b81018387016000805b87811015613420578484038b528251604081518187526133b782880182612d76565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b8281101561340957601f198583030184526133f7828751612d76565b958d0195938d019391506001016133db565b509e8b019e97505050938801935050600101613395565b50919998505050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156134ac57898603605f190184528451805188885261348089890182612d76565b91840151888303898601529190506134988183612d76565b97505050938101939281019260010161345c565b50808801519550888503818a015250505050612ef88183613375565b600081518084526020808501808196506005915083821b81018387016000805b87811015613420578484038b5282516040815181875261350a82880182612d76565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b8281101561355c57601f1985830301845261354a828751612d76565b958d0195938d0193915060010161352e565b509e8b019e975050509388019350506001016134e8565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156135f057898603605f19018452845180518888526135c489890182612d76565b91840151888303898601529190506135dc8183612d76565b9750505093810193928101926001016135a0565b50808801519550888503818a015250505050612ef881836134c8565b6000815160e0845261362160e0850182612e65565b90506020830151848203602086015261363a8282612f93565b9150506040830151848203604086015261365482826130af565b9150506060830151848203606086015261366e82826131cd565b9150506080830151848203608086015261368882826132eb565b91505060a083015184820360a08601526136a2828261342f565b91505060c083015184820360c0860152612ef88282613573565b60608152601e60608201527f46756e64696e67466565416d6f756e7450657253697a65557064617465640000608082015282602082015260a06040820152600061370960a083018461360c565b949350505050565b60608152601b60608201527a14ddd85c125b5c1858dd141bdbdb105b5bdd5b9d155c19185d1959602a1b608082015282602082015260a06040820152600061370960a083018461360c565b606081526011606082015270141bdbdb105b5bdd5b9d155c19185d1959607a1b608082015282602082015260a06040820152600061370960a083018461360c565b60608152601760608201527610db185a5b58589b19519d5b991a5b99d55c19185d1959604a1b608082015282602082015260a06040820152600061370960a083018461360c565b60608152601360608201527213dc195b925b9d195c995cdd155c19185d1959606a1b608082015282602082015260a06040820152600061370960a083018461360c565b606081526012606082015271155a519959519858dd1bdc955c19185d195960721b608082015282602082015260a06040820152600061370960a083018461360c565b60608152601460608201527310dbdb1b185d195c985b14dd5b555c19185d195960621b608082015282602082015260a06040820152600061370960a083018461360c565b606081526012606082015271119d5b991a5b99d199595cd0db185a5b595960721b608082015282602082015260a06040820152600061370960a083018461360c565b60608152601f60608201527f506f736974696f6e496d70616374506f6f6c416d6f756e745570646174656400608082015282602082015260a06040820152600061370960a083018461360c565b60608152602460608201527f436c61696d61626c6546756e64696e67416d6f756e7450657253697a65557064608082015263185d195960e21b60a082015282602082015260c06040820152600061370960c083018461360c565b60608152601660608201527513585c9ad95d141bdbdb15985b1d59555c19185d195960521b608082015282602082015260a06040820152600061370960a083018461360c565b60808152601f60808201527f5669727475616c506f736974696f6e496e76656e746f7279557064617465640060a082015283602082015282604082015260c060608201526000612ef860c083018461360c565b60608152601a60608201527910db185a5b58589b1950dbdb1b185d195c985b155c19185d195960321b608082015282602082015260a06040820152600061370960a083018461360c565b60808152601b60808201527a159a5c9d1d585b14ddd85c125b9d995b9d1bdc9e555c19185d1959602a1b60a082015283602082015282604082015260c060608201526000612ef860c083018461360c565b60608152601160608201527010dbdb1b185d195c985b10db185a5b5959607a1b608082015282602082015260a06040820152600061370960a083018461360c565b60608152602060608201527f43756d756c6174697665426f72726f77696e67466163746f7255706461746564608082015282602082015260a06040820152600061370960a083018461360c565b60608152601d60608201527f506f736974696f6e496d70616374506f6f6c4469737472696275746564000000608082015282602082015260a06040820152600061370960a083018461360c565b6060815260136060820152724d61726b6574506f6f6c56616c7565496e666f60681b608082015282602082015260a06040820152600061370960a083018461360c565b60608152601b60608201527a13dc195b925b9d195c995cdd125b951bdad95b9cd55c19185d1959602a1b608082015282602082015260a06040820152600061370960a083018461360c565b634e487b7160e01b600052603260045260246000fdfea26469706673582212204f7b825a2d8c1c37b37672071ab85d24fc05ddf0326cce856329b93444b3d0c564736f6c63430008120033",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}